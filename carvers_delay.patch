diff --git a/src/main/java/com/thevortex/allthemodium/AllTheModium.java b/src/main/java/com/thevortex/allthemodium/AllTheModium.java
index e088b57..1e0ff99 100644
--- a/src/main/java/com/thevortex/allthemodium/AllTheModium.java
+++ b/src/main/java/com/thevortex/allthemodium/AllTheModium.java
@@ -126,11 +126,10 @@ public class AllTheModium
 	public void setup(final FMLCommonSetupEvent event)
 	{
 		event.enqueueWork(() -> {
-
+			ATMCarvers.register();
 			ATMConfiguredStructures.registerConfiguredStructures();
 			Registry.register(Registry.CHUNK_GENERATOR, MINING_DIM_ID, MiningDimSource.CODEC);
 			Registry.register(Registry.CHUNK_GENERATOR, THE_OTHER_DIM_ID, TheOtherDimSource.CODEC);
-			ATMCarvers.register();
 		});
 	}
 	public void setupClient(final FMLClientSetupEvent event)
diff --git a/src/main/java/com/thevortex/allthemodium/worldgen/EventWorldgen.java b/src/main/java/com/thevortex/allthemodium/worldgen/EventWorldgen.java
index 0000e5b..1b93332 100644
--- a/src/main/java/com/thevortex/allthemodium/worldgen/EventWorldgen.java
+++ b/src/main/java/com/thevortex/allthemodium/worldgen/EventWorldgen.java
@@ -127,9 +127,9 @@ public class EventWorldgen {
 
 
         if ((mod.equals(Reference.MOD_ID)) && (biome.equals("basalt_deltas"))) {
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.NETHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CANYON_CWC));
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CANYON_CWC_HOLDER);
             event.getGeneration().getFeatures(GenerationStep.Decoration.SURFACE_STRUCTURES).add(ATMPlacedFeature.VOLCANO_CF);
             event.getGeneration().getFeatures(GenerationStep.Decoration.SURFACE_STRUCTURES).add(ATMPlacedFeature.MOD_DELTAS);
 
@@ -141,31 +141,31 @@ public class EventWorldgen {
         }
         if ((mod.equals(Reference.MOD_ID)) && (biome.equals("soul_sand_valley"))) {
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.WEEPING_VINES);
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.NETHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CANYON_CWC));
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CANYON_CWC_HOLDER);
 
 
         }
         if ((mod.equals(Reference.MOD_ID)) && (biome.equals("desert"))) {
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.NETHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CANYON_CWC));
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CANYON_CWC_HOLDER);
 
         }
         if ((mod.equals(Reference.MOD_ID)) && (biome.equals("desert_hills"))) {
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.WEEPING_VINES);
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.NETHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CANYON_CWC));
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CANYON_CWC_HOLDER);
 
 
         }
         if ((mod.equals(Reference.MOD_ID)) && (biome.equals("warped_forest"))) {
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.WEEPING_VINES);
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.NETHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CANYON_CWC));
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CANYON_CWC_HOLDER);
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.WARPED_FOREST_VEGETATION);
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(ATMPlacedFeature.CAVE_VINES);
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(ATMPlacedFeature.SOUL_TREE_GIANT);
@@ -179,9 +179,9 @@ public class EventWorldgen {
         }
         if ((mod.equals(Reference.MOD_ID)) && (biome.equals("crimson_forest"))) {
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.WEEPING_VINES);
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.NETHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CANYON_CWC));
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CANYON_CWC_HOLDER);
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.CRIMSON_FOREST_VEGETATION);
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.PATCH_CRIMSON_ROOTS);
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(ATMPlacedFeature.DEMONIC_TREE_GIANT);
@@ -196,9 +196,9 @@ public class EventWorldgen {
         }
         if (biome.equals("the_other")) {
             //Allthemodium(Vibranium/Soul Lava)
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.NETHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CAVE_CWC));
-            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(getHolder(ATMCarvers.OTHER_CANYON_CWC));
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+            event.getGeneration().getCarvers(GenerationStep.Carving.AIR).add(ATMCarvers.OTHER_CANYON_CWC_HOLDER);
 
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(NetherPlacements.WEEPING_VINES);
             event.getGeneration().getFeatures(GenerationStep.Decoration.VEGETAL_DECORATION).add(ATMPlacedFeature.ANCIENT_TREE_GIANT);
diff --git a/src/main/java/com/thevortex/allthemodium/worldgen/biomes/ATMBiomes.java b/src/main/java/com/thevortex/allthemodium/worldgen/biomes/ATMBiomes.java
index b42079b..4af2405 100644
--- a/src/main/java/com/thevortex/allthemodium/worldgen/biomes/ATMBiomes.java
+++ b/src/main/java/com/thevortex/allthemodium/worldgen/biomes/ATMBiomes.java
@@ -47,9 +47,9 @@ public class ATMBiomes {
     }
 
     public static void addDefaultCarvers(BiomeGenerationSettings.Builder builder) {
-        builder.addCarver(GenerationStep.Carving.AIR , ATMCarvers.getHolder(ATMCarvers.OTHER_CAVE_CWC));
-        builder.addCarver(GenerationStep.Carving.AIR , ATMCarvers.getHolder(ATMCarvers.NETHER_CAVE_CWC));
-        builder.addCarver(GenerationStep.Carving.AIR , ATMCarvers.getHolder(ATMCarvers.OTHER_CANYON_CWC));
+        builder.addCarver(GenerationStep.Carving.AIR , ATMCarvers.NETHER_CAVE_CWC_HOLDER);
+        builder.addCarver(GenerationStep.Carving.AIR , ATMCarvers.OTHER_CAVE_CWC_HOLDER);
+        builder.addCarver(GenerationStep.Carving.AIR , ATMCarvers.OTHER_CANYON_CWC_HOLDER);
     }
 
     public static void addDefaultOres(BiomeGenerationSettings.Builder builder) {
diff --git a/src/main/java/com/thevortex/allthemodium/worldgen/carvers/ATMCarvers.java b/src/main/java/com/thevortex/allthemodium/worldgen/carvers/ATMCarvers.java
index b41ea9c..90ece1f 100644
--- a/src/main/java/com/thevortex/allthemodium/worldgen/carvers/ATMCarvers.java
+++ b/src/main/java/com/thevortex/allthemodium/worldgen/carvers/ATMCarvers.java
@@ -5,6 +5,7 @@ import com.thevortex.allthemodium.registry.ModRegistry;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.data.BuiltinRegistries;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.valueproviders.ConstantFloat;
 import net.minecraft.util.valueproviders.TrapezoidFloat;
@@ -22,6 +23,10 @@ public class ATMCarvers {
     public static final Lazy<ConfiguredWorldCarver<CaveCarverConfiguration>> OTHER_CAVE_CWC = configure("other_caverns", ModRegistry.OTHER_CAVE_CARVER, new CaveCarverConfiguration(0.12F, UniformHeight.of(VerticalAnchor.aboveBottom(1), VerticalAnchor.belowTop(250)), ConstantFloat.of(0.5F), VerticalAnchor.aboveBottom(1), false, ConstantFloat.of(1.0F), ConstantFloat.of(1.0F), ConstantFloat.of(-0.7F)));
     public static final Lazy<ConfiguredWorldCarver<CanyonCarverConfiguration>> OTHER_CANYON_CWC = configure("other_canyons", ModRegistry.OTHER_CANYON_CARVER, new CanyonCarverConfiguration(0.05F, UniformHeight.of(VerticalAnchor.aboveBottom(75), VerticalAnchor.absolute(107)), ConstantFloat.of(3.0F), VerticalAnchor.aboveBottom(8), CarverDebugSettings.of(false, Blocks.WARPED_BUTTON.defaultBlockState()), UniformFloat.of(-0.125F, 0.125F), new CanyonCarverConfiguration.CanyonShapeConfiguration(UniformFloat.of(0.75F, 1.0F), TrapezoidFloat.of(0.0F, 6.0F, 2.0F), 3, UniformFloat.of(0.75F, 1.0F), 1.0F, 0.0F)));
 
+    public static final Holder<ConfiguredWorldCarver<?>> NETHER_CAVE_CWC_HOLDER = getHolder("other_caves");
+    public static final Holder<ConfiguredWorldCarver<?>> OTHER_CAVE_CWC_HOLDER = getHolder("other_caverns");
+    public static final Holder<ConfiguredWorldCarver<?>> OTHER_CANYON_CWC_HOLDER = getHolder("other_canyons");
+
     public static void register() {
 
             NETHER_CAVE_CWC.get();
@@ -35,7 +40,9 @@ public class ATMCarvers {
         return Lazy.of(() -> Registry.register(BuiltinRegistries.CONFIGURED_CARVER, registryName, carver.get().configured(configuration)));
     }
 
-    public static <T extends CarverConfiguration> Holder<ConfiguredWorldCarver<?>> getHolder(Lazy<ConfiguredWorldCarver<T>> entry) {
-        return Holder.direct(entry.get());
+    public static Holder<ConfiguredWorldCarver<?>> getHolder(String registryId) {
+        var registryName = new ResourceLocation(Reference.MOD_ID, registryId);
+        var resourceKey = ResourceKey.create(BuiltinRegistries.CONFIGURED_CARVER.key(), registryName);
+        return Holder.Reference.createStandAlone(BuiltinRegistries.CONFIGURED_CARVER, resourceKey);
     }
 }
