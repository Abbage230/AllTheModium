diff --git a/src/main/java/com/thevortex/allthemodium/events/ClientEvents.java b/src/main/java/com/thevortex/allthemodium/events/ClientEvents.java
new file mode 100644
index 0000000..92e2d22
--- /dev/null
+++ b/src/main/java/com/thevortex/allthemodium/events/ClientEvents.java
@@ -0,0 +1,18 @@
+package com.thevortex.allthemodium.events;
+
+import com.thevortex.allthemodium.items.toolitems.armor.models.allthemodium_helmet;
+import com.thevortex.allthemodium.reference.Reference;
+import net.minecraftforge.api.distmarker.Dist;
+import net.minecraftforge.client.event.EntityRenderersEvent;
+import net.minecraftforge.eventbus.api.SubscribeEvent;
+import net.minecraftforge.fml.common.Mod;
+
+@Mod.EventBusSubscriber(modid = Reference.MOD_ID, value = Dist.CLIENT, bus = Mod.EventBusSubscriber.Bus.MOD)
+public class ClientEvents {
+    @SubscribeEvent
+    public static void registerLayer(EntityRenderersEvent.RegisterLayerDefinitions event)
+    {
+        event.registerLayerDefinition(allthemodium_helmet.LAYER_LOCATION, allthemodium_helmet::createBodyLayer);
+    }
+
+}
diff --git a/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/Allthemodium_Helmet.java b/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/Allthemodium_Helmet.java
index 49ae921..365b824 100644
--- a/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/Allthemodium_Helmet.java
+++ b/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/Allthemodium_Helmet.java
@@ -1,17 +1,15 @@
 package com.thevortex.allthemodium.items.toolitems.armor;
 
-import com.mojang.blaze3d.systems.RenderSystem;
 import com.thevortex.allthemodium.init.ModItems;
 
 import com.thevortex.allthemodium.items.toolitems.armor.models.allthemodium_helmet;
 import net.minecraft.ChatFormatting;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.HumanoidModel;
-import net.minecraft.client.model.geom.ModelPart;
+import net.minecraft.client.model.geom.ModelLayers;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.world.entity.EquipmentSlot;
-import net.minecraft.world.entity.ItemSteerable;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ArmorItem;
@@ -21,9 +19,7 @@ import net.minecraft.world.item.TooltipFlag;
 import net.minecraft.world.level.Level;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
-import net.minecraftforge.client.ForgeHooksClient;
 import net.minecraftforge.client.IItemRenderProperties;
-import net.minecraftforge.client.RenderProperties;
 
 import java.util.List;
 import java.util.function.Consumer;
@@ -37,14 +33,10 @@ public class Allthemodium_Helmet extends ArmorItem {
 
     @Override
     public void initializeClient(Consumer<IItemRenderProperties> consumer) {
-        super.initializeClient(consumer);
         consumer.accept(new IItemRenderProperties() {
             @Override
             public <A extends HumanoidModel<?>> A getArmorModel(LivingEntity entityLiving, ItemStack itemStack, EquipmentSlot armorSlot, A _default) {
-               if(armorSlot == EquipmentSlot.HEAD) {
-                   return (A) new allthemodium_helmet(RenderProperties.get(ModItems.ALLTHEMODIUM_HELMET).getArmorModel(entityLiving, itemStack, armorSlot, _default).getHead());
-               }
-               return _default;
+                return (A) new allthemodium_helmet<Player>(Minecraft.getInstance().getEntityModels().bakeLayer(allthemodium_helmet.LAYER_LOCATION), armorSlot);
             }
         });
     }
diff --git a/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/models/allthemodium_helmet.java b/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/models/allthemodium_helmet.java
index c1b4539..b6001d0 100644
--- a/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/models/allthemodium_helmet.java
+++ b/src/main/java/com/thevortex/allthemodium/items/toolitems/armor/models/allthemodium_helmet.java
@@ -1,28 +1,29 @@
-package com.thevortex.allthemodium.items.toolitems.armor.models;// Made with Blockbench 4.0.0-beta.0
+package com.thevortex.allthemodium.items.toolitems.armor.models;
+// Made with Blockbench 4.0.0-beta.0
 // Exported for Minecraft version 1.17 with Mojang mappings
 // Paste this class into your mod and generate all required imports
 
 
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;
-import net.minecraft.client.model.EntityModel;
+import com.thevortex.allthemodium.reference.Reference;
 import net.minecraft.client.model.HumanoidModel;
 import net.minecraft.client.model.geom.ModelLayerLocation;
 import net.minecraft.client.model.geom.ModelPart;
 import net.minecraft.client.model.geom.PartPose;
 import net.minecraft.client.model.geom.builders.*;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 
 public class allthemodium_helmet<T extends LivingEntity> extends HumanoidModel<T> {
 	// This layer location should be baked with EntityRendererProvider.Context in the entity renderer and passed into this model's constructor
-	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation("allthemodium", "allthemodium_helmet"), "main");
-	private final ModelPart	head;
+	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation(Reference.MOD_ID, "allthemodium_armor"), "main");
+	protected final EquipmentSlot slot;
 
-	public allthemodium_helmet(ModelPart root) {
+	public allthemodium_helmet(ModelPart root, EquipmentSlot slot) {
 		super(root);
-		this.head = root.getChild("head");
+		this.slot = slot;
 	}
 
 	public static LayerDefinition createBodyLayer() {
@@ -36,16 +37,43 @@ public class allthemodium_helmet<T extends LivingEntity> extends HumanoidModel<T
 				.texOffs(28, 2).addBox(8.0F, -3.0F, 1.0F, 1.0F, 1.0F, 1.0F, new CubeDeformation(0.0F))
 				.texOffs(24, 2).addBox(8.0F, -3.0F, -1.0F, 1.0F, 4.0F, 2.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(-4.0F, -6.0F, -3.0F, 0.7854F, 0.0F, 0.0F));
 
-		return LayerDefinition.create(meshdefinition, 64, 32);
-	}
+		partdefinition.addOrReplaceChild("hat", CubeListBuilder.create(), PartPose.ZERO);
+		partdefinition.addOrReplaceChild("body", CubeListBuilder.create(), PartPose.ZERO);
+		partdefinition.addOrReplaceChild("right_arm", CubeListBuilder.create(), PartPose.ZERO);
+		partdefinition.addOrReplaceChild("left_arm", CubeListBuilder.create(), PartPose.ZERO);
+		partdefinition.addOrReplaceChild("right_leg", CubeListBuilder.create(), PartPose.ZERO);
+		partdefinition.addOrReplaceChild("left_leg", CubeListBuilder.create(), PartPose.ZERO);
 
-	@Override
-	public void setupAnim(T entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
 
+		return LayerDefinition.create(meshdefinition, 64, 32);
 	}
 
 	@Override
 	public void renderToBuffer(PoseStack poseStack, VertexConsumer buffer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
-		head.render(poseStack, buffer, packedLight, packedOverlay);
+		setPartVisibility(slot);
+		super.renderToBuffer(poseStack, buffer, packedLight, packedOverlay, red, green, blue, alpha);
+	}
+
+	private void setPartVisibility(EquipmentSlot slot) {
+		setAllVisible(false);
+		switch (slot) {
+			case HEAD:
+				head.visible = true;
+				hat.visible = true;
+				break;
+			case CHEST:
+				body.visible = true;
+				rightArm.visible = true;
+				leftArm.visible = true;
+				break;
+			case LEGS:
+				body.visible = true;
+				rightLeg.visible = true;
+				leftLeg.visible = true;
+				break;
+			case FEET:
+				rightLeg.visible = true;
+				leftLeg.visible = true;
+		}
 	}
 }
